function HieSm() {

var module = this



// Autogenerated with DRAKON Editor 1.31


function buildMachine(builders, parent, node) {
    // item 53
    var machine = getMachine(
    	builders,
    	parent,
    	node.type
    )
    // item 107
    var feedbacks = []
    // item 540001
    var _ind54 = 0;
    var _col54 = node;
    var _keys54 = Object.keys(_col54); 
    var _len54 = _keys54.length;
    while (true) {
        // item 540002
        if (_ind54 < _len54) {
            
        } else {
            break;
        }
        // item 540004
        var name = _keys54[_ind54]; var value = _col54[name];
        // item 56
        if (name == "type") {
            
        } else {
            // item 63
            if (value.type) {
                // item 108
                if (value.type == "feedback") {
                    // item 133
                    value.name = name
                    // item 110
                    feedbacks.push(value)
                } else {
                    // item 65
                    var child = buildMachine(
                    	builders,
                    	machine,
                    	value
                    )
                    // item 66
                    machine[name] = child
                }
            } else {
                // item 59
                machine[name] = value
            }
        }
        // item 540003
        _ind54++;
    }
    // item 1110001
    var _ind111 = 0;
    var _col111 = feedbacks;
    var _len111 = _col111.length;
    while (true) {
        // item 1110002
        if (_ind111 < _len111) {
            
        } else {
            break;
        }
        // item 1110004
        var node = _col111[_ind111];
        // item 113
        linkFeedback(machine, node)
        // item 1110003
        _ind111++;
    }
    // item 61
    return machine
}

function findSubobject(obj, path) {
    // item 140
    var steps = path.split("/")
    // item 1410001
    var _ind141 = 0;
    var _col141 = steps;
    var _len141 = _col141.length;
    while (true) {
        // item 1410002
        if (_ind141 < _len141) {
            
        } else {
            break;
        }
        // item 1410004
        var step = _col141[_ind141];
        // item 145
        if (step) {
            // item 148
            if (step == "..") {
                // item 150
                obj = obj.parent
            } else {
                // item 144
                obj = obj[step]
            }
        } else {
            
        }
        // item 1410003
        _ind141++;
    }
    // item 143
    return obj
}

function forwardToChild(self, child, messageType) {
    // item 179
    var action = function(message) {
    	invokeMethod(child, messageType, message)
    }
    // item 180
    self[messageType] = action
}

function forwardToParent(self, messageType) {
    // item 172
    var action = function(message) {
    	resendToParent(self, messageType, message)
    }
    // item 173
    self[messageType] = action
}

function getMachine(builders, parent, name) {
    // item 79
    var builder = builders[name]
    // item 80
    if (builder) {
        // item 83
        var machine = new builder()
        machine.parent = parent
        // item 85
        return machine
    } else {
        // item 84
        throw new Error("Unknown machine: \"" + name + "\"")
    }
}

function getTime() {
    // item 89
    var d = new Date();
    var seconds = d.getTime() / 1000;
    // item 90
    return seconds
}

function invokeAfter(messageType) {
    // item 103
    if (module.afterMessage) {
        // item 106
        module.afterMessage(messageType)
    } else {
        
    }
}

function invokeMethod(target, name, message) {
    // item 156
    var handler = target[name]
    // item 158
    if (handler) {
        // item 157
        handler.apply(target, [message])
    } else {
        
    }
}

function linkFeedback(machine, node) {
    // item 119
    var src = findSubobject(
    	machine,
    	node.path
    )
    // item 134
    src[node.srcField] = machine
}

function makeDeltaTime(current, old) {
    // item 96
    var dt = current - old
    // item 97
    return Math.max(0, Math.min(dt, 0.2))
}

function requestUpdate(target) {
    // item 38
    target.time = getTime()
    // item 39
    var action = function() {
    	var newTime = getTime()
    	var dt = makeDeltaTime(newTime, target.time)
    	target.update(dt)
    }
    // item 40
    window.requestAnimationFrame(action)
}

function resendToParent(self, messageType, message) {
    // item 186
    sendMessage(
    	self.parent,
    	messageType,
    	message
    )
}

function sendMessage(target, messageType, message) {
    // item 32
    sendMessageAfter(
    	target,
    	messageType,
    	message,
    	0
    )
}

function sendMessageAfter(target, messageType, message, ms) {
    // item 72
    var action = function() {
    	invokeMethod(target, messageType, message)
    	invokeAfter(messageType)
    }
    // item 73
    window.setTimeout(action, ms)
}


module.buildMachine = buildMachine
module.sendMessage = sendMessage
module.sendMessageAfter = sendMessageAfter
module.requestUpdate = requestUpdate
module.findSubobject = findSubobject
module.forwardToParent = forwardToParent
module.forwardToChild = forwardToChild
}
