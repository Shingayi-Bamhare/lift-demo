function Lift(window, document) {

var module = this

var Config = {
	Speed: 100,
	FloorHeight: 150,
	Luft: 5,
	DoorWidth: 5,
	LiftHeight: 100,
	LiftWidth: 60,
	OpenTimeout: 2000
}

var LiftBack = "#ffaf80"
var DoorBack = "#8080ff"
var LiftBorder = "#000080"

var sm = new HieSm()
var logic = new LiftLogic(sm, Config)

module.buttons = {}
module.floors = {}
module.sm = sm
module.logic = logic

// Autogenerated with DRAKON Editor 1.30


function CabinMovable() {
    // item 1931
    this.moveTo = setCabinPos
}

function CheckMessage() {
    // item 2845
    this.printTest = defaultPrintTest
    this.run = CheckMessage_run
}

function CheckMessage_run(instance) {
    // item 2851
    var self = this
    var data = self.step.data
    // item 2854
    var message = instance.messages[data.index]
    // item 2875
    var t = toSimple(instance, message.target)
    // item 3360
    var et = toTarget(instance, data.target)
    // item 2872
    if ((compareValues(self, et, t)) && (compareValues(self, data.messageType, message.messageType))) {
        // item 2878
        var m = toSimple(instance, message.message)
        // item 2877
        if (compareValues(self, data.message, m)) {
            // item 2871
            compareValues(self, data.ms, message.ms)
        } else {
            
        }
    } else {
        
    }
}

function CheckProperty() {
    // item 2756
    this.printTest = defaultPrintTest
    this.run = CheckProperty_run
}

function CheckProperty_run(instance) {
    // item 2755
    var data = this.step.data
    // item 2753
    var actual = findMachine(
    	instance,
    	data.path
    )
    // item 2836
    compareValues(this, data.expected, actual)
}

function CheckState() {
    // item 3050
    this.printTest = defaultPrintTest
    this.run = CheckState_run
}

function CheckState_run(instance) {
    // item 3057
    var data = this.step.data
    // item 3074
    var actual = findSubobject(
    	instance.logic,
    	data.path
    )
    // item 3058
    compareValues(this, data.expected, actual)
}

function ComplexDoor() {
    // item 1945
    var self = this
    // item 1943
    self.moveTo = moveComplexDoor
    // item 1944
    self.connect = function(floor) {
    	self.floor = floor
    }
}

function Control() {
    // item 1956
    this.dimFloor = dimFloor
    // item 1957
    this.setCurrent = function(floor) {
    	setDivText(
    		module.currentFloorScreen,
    		floor
    	)
    }
}

function CreateTree() {
    // item 2710
    this.printTest = defaultPrintTest
    this.run = CreateTree_run
}

function CreateTree_run(instance) {
    // item 2716
    var builders = instance.logic.makeBuilders()
    addMockBuilders(builders)
    // item 2717
    instance.parent = new MockParent()
    // item 2718
    instance.logic.root = instance.sm.buildMachine(
    	builders,
    	instance.parent,
    	this.step.data
    )
}

function ListScanner_CleanUp(self, msg) {
    
}

function ListScanner_Created_default(self, msg) {
    // item 2185
    self.state = "Created"
}

function ListScanner_Created_init(self, msg) {
    // item 2184
    self.list = msg.list
    self.current = 0
    // item 2295
    self.machine.init(msg.data)
    // item 2202
    sm.sendMessage(
    	self,
    	"next",
    	null
    )
    // item 2171
    self.state = "Waiting"
}

function ListScanner_Waiting_default(self, msg) {
    // item 2191
    self.state = "Waiting"
}

function ListScanner_Waiting_next(self, msg) {
    // item 2192
    var list = self.list
    var current = self.current
    // item 2196
    if (current >= list.length) {
        // item 2244
        sm.sendMessage(
        	self.parent,
        	"done",
        	self.machine
        )
        // item 2199
        self.state = null;
    } else {
        // item 2200
        var item = list[current]
        self.current = current + 1
        // item 2201
        self.machine.next(item)
        // item 2174
        self.state = "Working"
    }
}

function ListScanner_Working_default(self, msg) {
    // item 2390
    self.state = "Working"
}

function ListScanner_Working_done(self, msg) {
    // item 2203
    sm.sendMessage(
    	self,
    	"next",
    	null
    )
    // item 2388
    self.state = "Waiting"
}

function MockButtons() {
    // item 3313
    addMockMethod(this, "init")
    addMockMethod(this, "dim")
    // item 3314
    addMockFunction(this, "getAbove")
    addMockFunction(this, "getBelow")
}

function MockCabin() {
    // item 2999
    addMockMethod(this, "init")
    addMockMethod(this, "move")
}

function MockControl() {
    // item 2993
    addMockMethod(this, "setCurrent")
    addMockMethod(this, "dimFloor")
}

function MockDoor() {
    // item 2994
    addMockMethod(this, "init")
    addMockMethod(this, "open")
    addMockMethod(this, "close")
}

function MockMotor() {
    // item 2995
    addMockMethod(this, "init")
    addMockMethod(this, "connect")
    addMockMethod(this, "setTarget")
}

function MockParent() {
    
}

function MockScheduler() {
    // item 3032
    addMockMethod(this, "init")
    addMockMethod(this, "chooseNext")
    addMockMethod(this, "dim")
}

function Motor_CleanUp(self, msg) {
    
}

function Motor_Created_connect(self, msg) {
    // item 3329
    self.movable.connect(msg)
    // item 1984
    self.state = "Created"
}

function Motor_Created_init(self, msg) {
    // item 2013
    self.current = msg
    // item 2011
    moveMover(self)
    // item 1973
    self.state = "Still"
}

function Motor_Still_connect(self, msg) {
    // item 2022
    self.movable.connect(msg)
    // item 2021
    self.state = "Still"
}

function Motor_Still_setTarget(self, msg) {
    // item 2008
    if (setMotorTarget(self, msg)) {
        // item 1983
        self.state = "Working"
    } else {
        // item 2021
        self.state = "Still"
    }
}

function Motor_Working_setTarget(self, msg) {
    // item 2007
    setMotorTarget(self, msg)
    // item 1999
    self.state = "Working"
}

function Motor_Working_update(self, msg) {
    // item 2009
    self.current = self.current +
      self.velocity * msg
    // item 2002
    if (reachedGoal(self)) {
        // item 2004
        self.current = self.target
        // item 2010
        moveMover(self)
        // item 2012
        sendDone(self)
        // item 2006
        self.state = "Still"
    } else {
        // item 2001
        moveMover(self)
        // item 2014
        sm.sendMessage(
        	self.parent,
        	"update",
        	self.current
        )
        // item 2005
        sm.requestUpdate(self)
        // item 1998
        self.state = "Working"
    }
}

function RCanvas(parent, width, height) {
    // item 213
    this.width = width
    this.height = height
    this.items = {}
    // item 214
    var div = make(parent, "div")
    div.style.position = "relative"
    div.style.display = "inline-block"
    div.style.width = width + "px"
    div.style.height = height + "px"
    // item 216
    div.style.position = "relative"
    // item 217
    this.div = div
}

function SendMessage() {
    // item 2722
    this.printTest = defaultPrintTest
    this.run = SendMessage_run
}

function SendMessage_run(instance) {
    // item 2730
    var data = this.step.data
    // item 2728
    var machine = findMachine(
    	instance,
    	data.path
    )
    // item 2729
    var method = machine[data.messageType]
    method.apply(machine, [data.message])
}

function SetProperty() {
    // item 2768
    this.printTest = defaultPrintTest
    this.run = SetProperty_run
}

function SetProperty_run(instance) {
    // item 2775
    var data = this.step.data
    var steps = data.path.split("/")
    // item 2782
    var pathToMachine = allButLast(steps).join("/")
    // item 2783
    var property = getLast(steps)
    // item 2774
    var machine = findMachine(
    	instance,
    	pathToMachine
    )
    // item 2781
    machine[property] = data.value
}

function SetState() {
    // item 3003
    this.printTest = defaultPrintTest
    this.run = SetState_run
}

function SetState_run(instance) {
    // item 3009
    var data = this.step.data
    // item 3010
    instance.logic[data.property] = data.value
}

function Step(type, data) {
    // item 2653
    this.type = type
    this.data = data
}

function Test(name, steps) {
    // item 2647
    this.name = name
    this.steps = steps
}

function TestInstance(table) {
    // item 2427
    var self = this
    // item 2440
    self.messages = []
    self.table = table
    // item 2425
    self.sm = new HieSm()
    self.logic = new LiftLogic(self.sm, Config)
    // item 2426
    self.sm.sendMessage = function(t, mt, m) {
    	sendMessageAfterMock(self, t, mt, m, 0) 
    }
    self.sm.requestUpdate = function(t) {
    	requestUpdateMock(self, t)
    }
    self.sm.sendMessageAfter = function(t, mt, m, ms) {
    	sendMessageAfterMock(self, t, mt, m, ms)
    }
}

function TestRunner_CleanUp(self, msg) {
    
}

function TestRunner_Created_default(self, msg) {
    // item 2224
    self.state = "Created"
}

function TestRunner_Created_init(self, msg) {
    // item 2247
    var tests = getTests()
    var testArea = prepareTestDiv()
    // item 2249
    self.resultDiv = testArea.resultDiv
    // item 2248
    var obj = {
    	list: tests,
    	data: testArea.div
    }
    // item 2236
    self.scanner.init(obj)
    // item 2212
    self.state = "Working"
}

function TestRunner_Working_default(self, msg) {
    // item 2230
    self.state = "Working"
}

function TestRunner_Working_done(self, msg) {
    // item 2237
    reportTests(
    	self.resultDiv,
    	msg
    )
    // item 2235
    self.state = null;
}

function Tester_CleanUp(self, msg) {
    
}

function Tester_Created_default(self, msg) {
    // item 2278
    self.state = "Created"
}

function Tester_Created_init(self, msg) {
    // item 2277
    self.div = msg
    // item 2292
    self.total = 0
    self.succeeded = 0
    self.failed = 0
    // item 2266
    self.state = "Working"
}

function Tester_Working_default(self, msg) {
    // item 2284
    self.state = "Working"
}

function Tester_Working_next(self, msg) {
    // item 2286
    if (runTest(self.div, msg)) {
        // item 2291
        self.succeeded++
    } else {
        // item 2288
        self.failed++
    }
    // item 2294
    self.total++
    // item 2381
    sendDone(self)
    // item 2269
    self.state = "Working"
}

function addBuilders(builders) {
    // item 1917
    builders.CabinMovable = CabinMovable
    builders.Motor = Motor
    builders.Control = Control
    builders.ComplexDoor = ComplexDoor
}

function addErrorRow(table, stepObj, background) {
    // item 2361
    var td = addRow(
    	table,
    	stepObj.step,
    	background
    )
    // item 2362
    stepObj.printTest(td)
    // item 2363
    make(td, "hr")
    // item 2762
    printJson(stepObj.message, td)
}

function addExceptionRow(table, step, ex) {
    // item 2370
    var td = addRow(
    	table,
    	step,
    	"yellow"
    )
    // item 2373
    var p = make(td, "p")
    setDivText(p, "Exception: " + ex.message)
}

function addMockBuilders(builders) {
    // item 2886
    builders.MockMotor = MockMotor
    builders.MockControl = MockControl
    builders.MockDoor = MockDoor
    builders.MockCabin = MockCabin
    builders.MockScheduler = MockScheduler
    builders.MockButtons = MockButtons
}

function addMockFunction(self, name) {
    // item 3320
    var varName = name + "Arg"
    var called = name + "Called"
    var result = name + "Result"
    // item 3321
    var method = function(arg) {
    	self[varName] = arg
    	self[called] = true
    	return self[result]
    }
    // item 3322
    self[name] = method
    self[varName] = null
    self[called] = false
    self[result] = null
}

function addMockMethod(self, name) {
    // item 2990
    var varName = name + "Arg"
    var called = name + "Called"
    // item 2991
    var method = function(arg) {
    	self[varName] = arg
    	self[called] = true
    }
    // item 2992
    self[name] = method
    self[varName] = null
    self[called] = false
}

function addRow(table, step, background) {
    // item 2344
    var tr = make(table, "tr")
    // item 2345
    tr.style.background = background
    // item 2347
    var td1 = make(tr, "td")
    td1.style.fontWeight = "bold"
    td1.style.verticalAlign = "top"
    td1.style.padding = "5px"
    // item 2379
    var type = make(td1, "p")
    setDivText(type, step.type)
    type.style.fontWeight = "bold"
    // item 2348
    var td2 = make(tr, "td")
    td2.style.padding = "5px"
    // item 2346
    return td2
}

function addSpan(div, text, color, bold) {
    // item 2117
    var fname = make(div, "span")
    fname.style.color = color
    setDivText(fname, text)
    // item 2147
    if (bold) {
        // item 2150
        fname.style.fontWeight = "bold"
    } else {
        
    }
}

function addTestRow(table, stepObj, background) {
    // item 2354
    var td = addRow(
    	table,
    	stepObj.step,
    	background
    )
    // item 2355
    stepObj.printTest(td)
}

function afterMessage(messageType) {
    // item 2087
    if (messageType == "update") {
        
    } else {
        // item 2090
        redrawMachines()
    }
}

function allButLast(list) {
    // item 2789
    return  list.slice(
    	0,
    	list.length - 1
    )
}

function buildFloor(parent, floor, floorCount) {
    // item 182
    var table = make(parent, "table")
    var tr = make(table, "tr")
    // item 183
    var dtd = make(tr, "td")
    dtd.style.width = Config.DoorWidth + "px"
    // item 232
    var widget = new RCanvas(
    	dtd,
    	Config.DoorWidth,
    	Config.LiftHeight - 2
    )
    // item 276
    widget.div.style.top = "-2px"
    // item 233
    var door = createRCanvasItem(
    	widget,
    	"door",
    	0,
    	0,
    	Config.DoorWidth,
    	Config.LiftHeight - 2,
    	DoorBack
    )
    // item 231
    var row = {
    	id: floor,
    	widget: widget,
    	door: door
    }
    // item 250
    module.floors[floor] = row
    // item 184
    var ntd = make(tr, "td")
    centerCell(ntd)
    ntd.style.width = "50px"
    ntd.style.fontSize = "22px"
    // item 185
    setDivText(ntd, floor)
    // item 186
    var btd = make(tr, "td")
    centerCell(btd)
    // item 204
    if (floor == floorCount) {
        
    } else {
        // item 187
        row.up = createButton(
        	btd,
        	"buttUp" + floor,
        	"Up",
        	wantUp,
        	floor
        ).id
    }
    // item 201
    if (floor == 1) {
        
    } else {
        // item 188
        row.down = createButton(
        	btd,
        	"buttDown" + floor,
        	"Down",
        	wantDown,
        	floor
        ).id
    }
}

function buildPicture(floorCount) {
    // item 92
    var root = get("lift")
    root.innerHTML = ""
    // item 93
    root.style.display = "inline-block"
    // item 94
    var table = make(root, "table")
    var tr = make(table, "tr")
    // item 95
    var buttonsTd = make(tr, "td")
    var liftTd = make(tr, "td")
    var floorsTd = make(tr, "td")
    // item 120
    centerCell(buttonsTd)
    buttonsTd.style.padding = "10px"
    // item 121
    var buttonsHolder = make(buttonsTd, "div")
    buttonsHolder.style.display = "inline-block"
    // item 122
    var buttonsTable = make(buttonsHolder, "table")
    var ttr = make(buttonsTable, "tr")
    var tleft = make(ttr, "td")
    var tright = make(ttr, "td")
    tleft.style.verticalAlign = "bottom"
    // item 1846
    centerCell(tleft)
    tleft.style.width = "50px"
    tleft.style.fontSize = "22px"
    module.currentFloorScreen = tleft
    // item 157
    var wellHeight = floorCount * Config.FloorHeight
    var wellWidth = Config.LiftWidth + Config.DoorWidth + Config.Luft * 2
    // item 156
    var well = new RCanvas(
    	liftTd,
    	wellWidth,
    	wellHeight
    )
    // item 228
    var cabin = createRCanvasItem(
    	well,
    	"cabin",
    	0,
    	100,
    	Config.LiftWidth,
    	Config.LiftHeight - 2,
    	LiftBack
    )
    // item 229
    var cabinDoor = createRCanvasItem(
    	well,
    	"cabinDoor",
    	Config.LiftWidth + Config.Luft,
    	100,
    	Config.DoorWidth,
    	Config.LiftHeight - 2,
    	DoorBack
    )
    // item 230
    module.well = {
    	widget: well,
    	cabin: cabin,
    	cabinDoor: cabinDoor
    }
    // item 166
    var ftable = make(floorsTd, "table")
    // item 1590001
    var i = 0;
    while (true) {
        // item 1590002
        if (i < floorCount) {
            
        } else {
            break;
        }
        // item 161
        var floor = floorCount - i
        // item 164
        var fdivHeight = (Config.FloorHeight) + "px"
        // item 162
        var ftr = make(ftable, "tr")
        var ftd = make(ftr, "td")
        ftd.style.verticalAlign = "bottom"
        
        ftd.style.height = fdivHeight
        ftd.style.borderBottom = "solid 1px black"
        // item 167
        buildFloor(ftd, floor, floorCount)
        // item 1590003
        i++;
    }
    // item 18340001
    var i = 0;
    while (true) {
        // item 18340002
        if (i < floorCount) {
            
        } else {
            break;
        }
        // item 1836
        var floor = floorCount - i
        var id = "buttDash" + floor
        // item 1837
        var buttObject = createButton(
        	tright,
        	id,
        	floor,
        	onDashboardButton,
        	floor
        )
        // item 1840
        getFloor(floor).dash = buttObject.id
        // item 1839
        var butt = buttObject.div
        // item 1838
        butt.style.minWidth = "30px"
        butt.style.marginLeft = "10px"
        // item 18340003
        i++;
    }
}

function centerCell(div) {
    // item 119
    div.style.verticalAlign = "middle"
    div.style.textAlign = "center"
}

function compareValues(self, expected, actual) {
    // item 2830
    if (expected == actual) {
        // item 2832
        self.code = "success"
        // item 2852
        return true
    } else {
        // item 2833
        self.code = "error"
        self.message = {
        	expected: expected,
        	actual: actual
        }
        // item 2853
        return false
    }
}

function createButton(parent, id, text, onclick, signalId) {
    // item 102
    var div = make(parent, "div")
    setDivText(div, text)
    // item 154
    var callback = function() {
    	onclick(signalId)
    }
    // item 103
    div.onclick = callback
    // item 107
    div.className = "button"
    // item 105
    var row = {
    	id: id,
    	div: div
    }
    // item 106
    module.buttons[id] = row
    // item 104
    return row
}

function createRCanvasItem(rcanvas, id, left, top, width, height, back) {
    // item 224
    var div = make(rcanvas.div, "div")
    div.style.display = "inline-block"
    div.style.position = "absolute"
    div.style.left = left + "px"
    div.style.top = top + "px"
    div.style.width = width + "px"
    div.style.height = height + "px"
    // item 227
    div.style.background = back
    div.style.border = "solid 1px " + LiftBorder
    // item 223
    var row = {
    	id: id,
    	div: div
    }
    // item 226
    rcanvas.items[id] = row
    // item 225
    return id
}

function createStep(step) {
    // item 2453
    var builder = module.testBuilders[step.type]
    // item 2454
    if (builder) {
        // item 2457
        var stepObj = new builder()
        stepObj.step = step
        // item 2458
        return stepObj
    } else {
        // item 2459
        throw new Error("Unknown test step type: " + step.type)
    }
}

function defaultPrintTest(div) {
    // item 2477
    printJson(
    	this.step.data,
    	div
    )
}

function dimFloor(floor) {
    // item 1964
    lightDashButton(floor, false)
    // item 1963
    lightUpButton(floor, false)
    // item 1965
    lightDownButton(floor, false)
}

function drawMachine(root, field, machine, depth, visited) {
    // item 3303
    if (visited.indexOf(machine) == -1) {
        // item 3306
        visited.push(machine)
        // item 2107
        var paddingLeft = (depth * 30) + "px"
        // item 2106
        var div = make(root, "div")
        div.style.marginTop = "5px"
        div.style.marginBottom = "5px"
        div.style.paddingLeft = paddingLeft
        // item 2118
        addSpan(div, field + ": ", "brown")
        // item 2119
        addSpan(div, machine.type_name, "black")
        addSpan(div, " - ", "grey")
        addSpan(div, machine.state, "black", true)
        // item 2120
        var keys = Object.keys(machine)
        keys.sort()
        // item 21210001
        var _ind2121 = 0;
        var _col2121 = keys;
        var _len2121 = _col2121.length;
        while (true) {
            // item 21210002
            if (_ind2121 < _len2121) {
                
            } else {
                break;
            }
            // item 21210004
            var key = _col2121[_ind2121];
            // item 2123
            if ((((key == "type") || (key == "parent")) || (key == "state")) || (key == "type_name")) {
                
            } else {
                // item 2126
                var value = machine[key]
                // item 2128
                if ((((value == null) || (typeof value == "function")) || (typeof value == "object")) || (value.type_name)) {
                    
                } else {
                    // item 2131
                    addSpan(div, " " + key + ":" + value, "grey")
                }
            }
            // item 21210003
            _ind2121++;
        }
        // item 21320001
        var _ind2132 = 0;
        var _col2132 = keys;
        var _len2132 = _col2132.length;
        while (true) {
            // item 21320002
            if (_ind2132 < _len2132) {
                
            } else {
                break;
            }
            // item 21320004
            var key = _col2132[_ind2132];
            // item 2134
            if ((key == "type") || (key == "parent")) {
                
            } else {
                // item 2137
                var value = machine[key]
                // item 2139
                if ((value == null) || (!(value.type_name))) {
                    
                } else {
                    // item 2142
                    drawMachine(
                    	root,
                    	key,
                    	value,
                    	depth + 1,
                    	visited
                    )
                }
            }
            // item 21320003
            _ind2132++;
        }
    } else {
        
    }
}

function findMachine(instance, path) {
    // item 2739
    var machine = instance.logic.root
    // item 3073
    return findSubobject(machine, path)
}

function findSubobject(obj, path) {
    // item 3064
    var steps = path.split("/")
    // item 30650001
    var _ind3065 = 0;
    var _col3065 = steps;
    var _len3065 = _col3065.length;
    while (true) {
        // item 30650002
        if (_ind3065 < _len3065) {
            
        } else {
            break;
        }
        // item 30650004
        var step = _col3065[_ind3065];
        // item 3070
        if (step) {
            // item 3069
            obj = obj[step]
        } else {
            
        }
        // item 30650003
        _ind3065++;
    }
    // item 3068
    return obj
}

function get(id) {
    // item 66
    var element = document.getElementById(id)
    // item 68
    if (element) {
        
    } else {
        // item 71
        throw new Error("Element \"" + id + "\" not found")
    }
    // item 67
    return element
}

function getButton(buttonId) {
    // item 2067
    return module.buttons[buttonId]
}

function getFloor(floor) {
    // item 1927
    return module.floors[floor]
}

function getLast(list) {
    // item 2795
    return list[list.length - 1]
}

function getTests() {
    // item 2307
    var tests = []
    // item 2915
    testCabin(tests)
    // item 2927
    testDoor(tests)
    // item 2636
    testScheduler(tests)
    // item 3241
    testLiftMain(tests)
    // item 2308
    return tests
}

function guard(condition, name) {
    // item 39
    if (condition) {
        
    } else {
        // item 42
        throw new Error("Bad argument: " + name)
    }
}

function guardInt(value, min, max, name) {
    // item 48
    if ((value < min) || (value > max)) {
        // item 52
        var message = name +
         " out of range: " +
         value
        // item 53
        guard(false, message)
    } else {
        
    }
}

function hasSubobjects(obj) {
    // item 2537
    if (isArray(obj)) {
        // item 25420001
        var _ind2542 = 0;
        var _col2542 = obj;
        var _len2542 = _col2542.length;
        while (true) {
            // item 25420002
            if (_ind2542 < _len2542) {
                
            } else {
                // item 2547
                return false
            }
            // item 25420004
            var value = _col2542[_ind2542];
            // item 2603
            if (isObject(value)) {
                // item 2546
                return true
            } else {
                
            }
            // item 25420003
            _ind2542++;
        }
    } else {
        // item 25220001
        var _ind2522 = 0;
        var _col2522 = obj;
        var _keys2522 = Object.keys(_col2522); 
        var _len2522 = _keys2522.length;
        while (true) {
            // item 25220002
            if (_ind2522 < _len2522) {
                
            } else {
                // item 2541
                return false
            }
            // item 25220004
            var key = _keys2522[_ind2522]; var value = _col2522[key];
            // item 2524
            if (isObject(value)) {
                // item 2540
                return true
            } else {
                
            }
            // item 25220003
            _ind2522++;
        }
    }
}

function init(floorCount) {
    // item 33
    guardInt(
    	floorCount,
    	2,
    	100,
    	"floorCount"
    )
    // item 269
    module.floorCount = floorCount
    // item 96
    buildPicture(floorCount)
    // item 574
    var builders = logic.makeBuilders()
    addBuilders(builders)
    // item 1919
    logic.init(
    	builders,
    	floorCount
    )
    // item 2146
    redrawMachines()
}

function isArray(obj) {
    // item 2532
    if (Object.prototype.toString.call(obj) === '[object Array]') {
        // item 2535
        return true
    } else {
        // item 2536
        return false
    }
}

function isObject(obj) {
    // item 2597
    if ((obj == null) || (!(typeof obj == "object"))) {
        // item 2601
        return false
    } else {
        // item 2600
        return true
    }
}

function lightButton(button, on) {
    // item 766
    if (on) {
        // item 744
        button.div.className = "button lit_button"
    } else {
        // item 769
        button.div.className = "button"
    }
}

function lightDashButton(floor, on) {
    // item 1830
    var row = getFloor(floor)
    // item 764
    var button = getButton(row.dash)
    // item 765
    lightButton(button, on)
}

function lightDownButton(floor, on) {
    // item 787
    var row = getFloor(floor)
    // item 788
    if (row.down) {
        // item 2068
        var button = getButton(row.down)
        // item 786
        lightButton(button, on)
    } else {
        
    }
}

function lightUpButton(floor, on) {
    // item 1763
    var row = getFloor(floor)
    // item 778
    if (row.up) {
        // item 2070
        var button = getButton(row.up)
        // item 2069
        lightButton(button, on)
    } else {
        
    }
}

function make(parent, tag) {
    // item 59
    var element = document.createElement(tag)
    parent.appendChild(element)
    // item 60
    return element
}

function makeTestBuilders() {
    // item 2464
    var builders = {}
    // item 2466
    builders["create tree"] = CreateTree
    builders["send message"] = SendMessage
    builders["check property"] = CheckProperty
    builders["set property"] = SetProperty
    builders["check message"] = CheckMessage
    builders["set state"] = SetState
    builders["check state"] = CheckState
    // item 2465
    return builders
}

function moveComplexDoor(to) {
    // item 1951
    setCabinDoor(to)
    // item 1952
    setDoor(this.floor, to)
}

function moveMover(self) {
    // item 2028
    self.movable.moveTo(self.current)
}

function moveRCanvasItem(rcanvas, id, top) {
    // item 239
    var div = rcanvas.items[id].div
    // item 240
    div.style.top = top + "px"
}

function noop() {
    
}

function onDashboardButton(floor) {
    // item 737
    lightDashButton(floor, true)
    // item 812
    logic.go(floor)
    // item 2079
    redrawMachines()
}

function prepareTestDiv() {
    // item 2314
    var root = get("test")
    root.innerHTML = ""
    root.style.padding = "10px"
    // item 2313
    var result = make(root, "p")
    setDivText(result, "Running...")
    // item 2317
    return {
    	div: root,
    	resultDiv: result
    }
}

function printFieldName(name, div) {
    // item 2614
    addSpan(div, name + ":", "grey", false)
}

function printJson(obj, div) {
    // item 2663
    printJsonCore(
    	null,
    	obj,
    	0,
    	div
    )
}

function printJsonCore(name, obj, depth, div) {
    // item 2615
    var i
    // item 2512
    var myDiv = make(div, "div")
    myDiv.style.paddingLeft = (depth * 30) + "px"
    // item 2514
    if (name) {
        // item 3357
        if (name == "parent") {
            
        } else {
            // item 2513
            printFieldName(name, myDiv)
            // item 2604
            if (isObject(obj)) {
                // item 2554
                if (hasSubobjects(obj)) {
                    // item 2560
                    if (isArray(obj)) {
                        // item 26060001
                        i = 0;
                        while (true) {
                            // item 26060002
                            if (i < obj.length) {
                                
                            } else {
                                break;
                            }
                            // item 2616
                            var item = obj[i]
                            // item 2608
                            printJsonCore(
                            	i,
                            	item,
                            	depth + 1,
                            	div
                            )
                            // item 26060003
                            i++;
                        }
                    } else {
                        // item 25900001
                        var _ind2590 = 0;
                        var _col2590 = obj;
                        var _keys2590 = Object.keys(_col2590); 
                        var _len2590 = _keys2590.length;
                        while (true) {
                            // item 25900002
                            if (_ind2590 < _len2590) {
                                
                            } else {
                                break;
                            }
                            // item 25900004
                            var key = _keys2590[_ind2590]; var value = _col2590[key];
                            // item 2605
                            printJsonCore(
                            	key,
                            	value,
                            	depth + 1,
                            	div
                            )
                            // item 25900003
                            _ind2590++;
                        }
                    }
                } else {
                    // item 2630
                    printValue(" ", myDiv)
                    // item 2617
                    if (isArray(obj)) {
                        // item 26230001
                        i = 0;
                        while (true) {
                            // item 26230002
                            if (i < obj.length) {
                                
                            } else {
                                break;
                            }
                            // item 2626
                            var item = obj[i]
                            // item 2629
                            printValue(item, myDiv)
                            printValue(" ", myDiv)
                            // item 26230003
                            i++;
                        }
                    } else {
                        // item 26200001
                        var _ind2620 = 0;
                        var _col2620 = obj;
                        var _keys2620 = Object.keys(_col2620); 
                        var _len2620 = _keys2620.length;
                        while (true) {
                            // item 26200002
                            if (_ind2620 < _len2620) {
                                
                            } else {
                                break;
                            }
                            // item 26200004
                            var key = _keys2620[_ind2620]; var value = _col2620[key];
                            // item 2627
                            printFieldName(key, myDiv)
                            // item 2628
                            printValue(value, myDiv)
                            printValue(" ", myDiv)
                            // item 26200003
                            _ind2620++;
                        }
                    }
                }
            } else {
                // item 2551
                printValue(obj, myDiv)
            }
        }
    } else {
        // item 2604
        if (isObject(obj)) {
            // item 2554
            if (hasSubobjects(obj)) {
                // item 2560
                if (isArray(obj)) {
                    // item 26060001
                    i = 0;
                    while (true) {
                        // item 26060002
                        if (i < obj.length) {
                            
                        } else {
                            break;
                        }
                        // item 2616
                        var item = obj[i]
                        // item 2608
                        printJsonCore(
                        	i,
                        	item,
                        	depth + 1,
                        	div
                        )
                        // item 26060003
                        i++;
                    }
                } else {
                    // item 25900001
                    var _ind2590 = 0;
                    var _col2590 = obj;
                    var _keys2590 = Object.keys(_col2590); 
                    var _len2590 = _keys2590.length;
                    while (true) {
                        // item 25900002
                        if (_ind2590 < _len2590) {
                            
                        } else {
                            break;
                        }
                        // item 25900004
                        var key = _keys2590[_ind2590]; var value = _col2590[key];
                        // item 2605
                        printJsonCore(
                        	key,
                        	value,
                        	depth + 1,
                        	div
                        )
                        // item 25900003
                        _ind2590++;
                    }
                }
            } else {
                // item 2630
                printValue(" ", myDiv)
                // item 2617
                if (isArray(obj)) {
                    // item 26230001
                    i = 0;
                    while (true) {
                        // item 26230002
                        if (i < obj.length) {
                            
                        } else {
                            break;
                        }
                        // item 2626
                        var item = obj[i]
                        // item 2629
                        printValue(item, myDiv)
                        printValue(" ", myDiv)
                        // item 26230003
                        i++;
                    }
                } else {
                    // item 26200001
                    var _ind2620 = 0;
                    var _col2620 = obj;
                    var _keys2620 = Object.keys(_col2620); 
                    var _len2620 = _keys2620.length;
                    while (true) {
                        // item 26200002
                        if (_ind2620 < _len2620) {
                            
                        } else {
                            break;
                        }
                        // item 26200004
                        var key = _keys2620[_ind2620]; var value = _col2620[key];
                        // item 2627
                        printFieldName(key, myDiv)
                        // item 2628
                        printValue(value, myDiv)
                        printValue(" ", myDiv)
                        // item 26200003
                        _ind2620++;
                    }
                }
            }
        } else {
            // item 2551
            printValue(obj, myDiv)
        }
    }
}

function printValue(value, div) {
    var _sw25680000_ = 0;
    // item 2579
    var color
    var bold = false
    // item 2589
    if (value == null) {
        // item 2587
        color = "#000080"
        value = "null"
    } else {
        // item 25680000
        _sw25680000_ = typeof value;
        // item 25680001
        if (_sw25680000_ === "string") {
            // item 2580
            color = "#800000"
            // item 2703
            if (value) {
                
            } else {
                // item 2706
                value = "<empty>"
            }
        } else {
            // item 25680002
            if (_sw25680000_ === "number") {
                // item 2581
                color = "#000080"
            } else {
                // item 25680003
                if (_sw25680000_ === "boolean") {
                    // item 2584
                    if (value) {
                        // item 2583
                        color = "#008000"
                        bold = true
                    } else {
                        // item 2586
                        color = "black"
                        bold = false
                    }
                } else {
                    // item 2582
                    color = "black"
                }
            }
        }
    }
    // item 2578
    addSpan(
    	div,
    	value,
    	color,
    	bold
    )
}

function reachedGoal(self) {
    // item 2057
    if (self.velocity > 0) {
        // item 2060
        return self.current >= self.target
    } else {
        // item 2061
        return self.current <= self.target
    }
}

function redrawMachines() {
    // item 2076
    var root = get("vis")
    root.innerHTML = ""
    root.style.padding = "10px"
    root.style.verticalAlign = "top"
    // item 2077
    root.style.display = "inline-block"
    // item 2091
    drawMachine(root, "root", logic.root, 0, [])
}

function reportTests(div, result) {
    // item 2243
    var numbers = result.total + " tests, " +
      result.succeeded + " succeeded, " +
      result.failed + " failed"
    // item 2250
    var message
    // item 2251
    if (result.failed == 0) {
        // item 2254
        message = "All correct! " + numbers
    } else {
        // item 2255
        message = "Some errors occured. " + numbers
    }
    // item 2245
    setDivText(div, message)
}

function requestUpdateMock(self, target) {
    // item 2441
    self.toUpdate = target
}

function resizeRCanvasItem(rcanvas, id, height) {
    // item 246
    var div = rcanvas.items[id].div
    // item 247
    div.style.height = height + "px"
}

function runTest(div, test) {
    // item 2412
    var h3 = make(div, "h3")
    setDivText(h3, test.name)
    // item 2413
    var table = make(div, "table")
    table.className = "test_table"
    var success = true
    // item 2442
    var instance = new TestInstance(table)
    // item 24140001
    var _ind2414 = 0;
    var _col2414 = test.steps;
    var _len2414 = _col2414.length;
    while (true) {
        // item 24140002
        if (_ind2414 < _len2414) {
            
        } else {
            break;
        }
        // item 24140004
        var step = _col2414[_ind2414];
        // item 2416
        if (runTestStep(instance, step)) {
            
        } else {
            // item 2419
            success = false
        }
        // item 24140003
        _ind2414++;
    }
    // item 2443
    return success
}

function runTestStep(instance, step) {
    var _sw23970000_ = 0;
    // item 2411
    var table = instance.table
    var stepObj
    // item 2396
    try {
    	stepObj = runTestStepCore(instance, step)
    } catch (ex) {
    	console.log(ex)
    	addExceptionRow(table, step, ex)
    	return false
    }
    // item 23970000
    _sw23970000_ = stepObj.code;
    // item 23970001
    if (_sw23970000_ === "success") {
        // item 2408
        addTestRow(table, stepObj, "#80ff80")
        // item 2405
        return true
    } else {
        // item 23970002
        if (_sw23970000_ === "error") {
            // item 2409
            addErrorRow(table, stepObj, "#ff8080")
            // item 2407
            return false
        } else {
            // item 2410
            addTestRow(table, stepObj, "white")
            // item 2406
            return true
        }
    }
}

function runTestStepCore(instance, step) {
    // item 2446
    var stepObj = createStep(step)
    // item 2447
    stepObj.run(instance)
    // item 2662
    return stepObj
}

function runTests() {
    // item 2299
    var runner = new TestRunner()
    var scanner = new ListScanner()
    var tester = new Tester()
    // item 2300
    runner.scanner = scanner
    scanner.parent = runner
    // item 2301
    scanner.machine = tester
    tester.parent = scanner
    // item 2302
    runner.init()
}

function sendDone(self) {
    // item 2051
    sm.sendMessage(
    	self.parent,
    	"done",
    	self
    )
}

function sendMessageAfterMock(self, target, messageType, message, ms) {
    // item 2438
    var m1 = {
    	target: target,
    	messageType: messageType,
    	message: message,
    	ms: ms
    }
    // item 2439
    self.messages.push(m1)
}

function setCabinDoor(height) {
    // item 270
    resizeRCanvasItem(
    	module.well.widget,
    	module.well.cabinDoor,
    	height
    )
}

function setCabinPos(y) {
    // item 1939
    var height = module.floorCount * Config.FloorHeight
    var top = height - y - Config.LiftHeight
    // item 1937
    moveRCanvasItem(
    	module.well.widget,
    	module.well.cabin,
    	top
    )
    // item 1938
    moveRCanvasItem(
    	module.well.widget,
    	module.well.cabinDoor,
    	top
    )
}

function setDivText(div, text) {
    // item 140
    div.innerHTML = "";
    var t = document.createTextNode(text);
    div.appendChild(t);
}

function setDoor(floor, height) {
    // item 272
    var item = getFloor(floor)
    // item 271
    resizeRCanvasItem(
    	item.widget,
    	item.door,
    	height
    )
}

function setMotorTarget(self, target) {
    // item 2034
    if (self.current == target) {
        // item 2042
        return false
    } else {
        // item 2045
        self.target = target
        // item 2043
        sm.requestUpdate(self)
        // item 2038
        if (target > self.current) {
            // item 2040
            self.velocity = Config.Speed
        } else {
            // item 2041
            self.velocity = -Config.Speed
        }
        // item 2037
        return true
    }
}

function testCabin(tests) {
    // item 2911
    var steps
    // item 2914
    var tree = {
    	type: "Cabin",
    	motor: {type:"MockMotor"},
    	ctrl: {type:"MockControl"}
    }
    // item 2912
    steps = [
    	new Step("create tree", tree),
    	new Step("send message", {path:"/", messageType:"init", message:2}),
    	new Step("check property", {path:"/current", expected:2}),
    	new Step("check property", {path:"/motor/initArg", expected:150}),
    	new Step("check property", {path:"/ctrl/setCurrentArg", expected:2}),
    	new Step("check property", {path:"/state", expected:"Still"})
    ]
    // item 2913
    tests.push(new Test("Cabin-Created-init", steps))
    // item 2921
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Still"}),
    new Step("send message", {path:"/", messageType:"move", message:3}),
    new Step("check property", {path:"/motor/setTargetArg", expected:300}),
    new Step("check property", {path:"/state", expected:"Moving"})
    ]
    // item 2922
    tests.push(new Test("Cabin-Still-move", steps))
    // item 3342
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Moving"}),
    new Step("send message", {path:"/", messageType:"move", message:3}),
    new Step("check property", {path:"/motor/setTargetArg", expected:300}),
    new Step("check property", {path:"/state", expected:"Moving"})
    ]
    // item 3343
    tests.push(new Test("Cabin-Moving-move", steps))
    // item 2923
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Moving"}),
    new Step("set property", {path:"/current", value:1}),
    new Step("send message", {path:"/", messageType:"update", message:300}),
    new Step("check property", {path:"/current", expected:3}),
    new Step("check property", {path:"/ctrl/setCurrentArg", expected:3}),
    new Step("check property", {path:"/state", expected:"Moving"})
    ]
    // item 2924
    tests.push(new Test("Cabin-Moving-update", steps))
    // item 2925
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Moving"}),
    new Step("set property", {path:"/target", value:1}),
    new Step("send message", {path:"/", messageType:"done", message:null}),
    new Step("check property", {path:"/current", expected:1}),
    new Step("check property", {path:"/state", expected:"Still"}),
    new Step("check property", {path:"/ctrl/setCurrentArg", expected:1}),
    new Step("check message", {index:0, target:"parent", messageType:"arrived", message:1, ms:0})
    ]
    // item 2926
    tests.push(new Test("Cabin-Moving-done", steps))
}

function testDoor(tests) {
    // item 2959
    var steps
    // item 2962
    var tree = {
    	type: "Door",
    	motor: {type:"MockMotor"}
    }
    // item 2960
    steps = [
    	new Step("create tree", tree),
    	new Step("send message", {path:"/", messageType:"init", message:2}),
    	new Step("check property", {path:"/motor/initArg", expected:98}),
    	new Step("check property", {path:"/state", expected:"Closed"})
    ]
    // item 2961
    tests.push(new Test("Door-Created-init", steps))
    // item 2967
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Closed"}),
    new Step("send message", {path:"/", messageType:"open", message:null}),
    new Step("check property", {path:"/motor/setTargetArg", expected:20}),
    new Step("check property", {path:"/state", expected:"Opening"})
    ]
    // item 2968
    tests.push(new Test("Door-Closed-open", steps))
    // item 3334
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Closed"}),
    new Step("send message", {path:"/", messageType:"close", message:null}),
    new Step("check property", {path:"/motor/setTargetCalled", expected:false}),
    new Step("check property", {path:"/state", expected:"Closed"})
    ]
    // item 3335
    tests.push(new Test("Door-Closed-close", steps))
    // item 2969
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Opening"}),
    new Step("send message", {path:"/", messageType:"close", message:null}),
    new Step("check property", {path:"/motor/setTargetArg", expected:98}),
    new Step("check property", {path:"/state", expected:"Closing"})
    ]
    // item 2970
    tests.push(new Test("Door-Opening-close", steps))
    // item 2971
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Opening"}),
    new Step("send message", {path:"/", messageType:"done", message:null}),
    new Step("check message", {index:0, target:"parent", messageType:"opened", message:null, ms:0}),
    new Step("check property", {path:"/state", expected:"Open"})
    ]
    // item 2972
    tests.push(new Test("Door-Opening-done", steps))
    // item 2973
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Open"}),
    new Step("send message", {path:"/", messageType:"close", message:null}),
    new Step("check property", {path:"/motor/setTargetArg", expected:98}),
    new Step("check property", {path:"/state", expected:"Closing"})
    ]
    // item 2974
    tests.push(new Test("Door-Open-close", steps))
    // item 3332
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Open"}),
    new Step("send message", {path:"/", messageType:"open", message:null}),
    new Step("check property", {path:"/motor/setTargetCalled", expected:false}),
    new Step("check property", {path:"/state", expected:"Open"})
    ]
    // item 3333
    tests.push(new Test("Door-Open-open", steps))
    // item 2975
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Closing"}),
    new Step("send message", {path:"/", messageType:"open", message:null}),
    new Step("check property", {path:"/motor/setTargetArg", expected:20}),
    new Step("check property", {path:"/state", expected:"Opening"})
    ]
    // item 2976
    tests.push(new Test("Door-Closing-open", steps))
    // item 2977
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Closing"}),
    new Step("send message", {path:"/", messageType:"done", message:null}),
    new Step("check message", {index:0, target:"parent", messageType:"closed", message:null, ms:0}),
    new Step("check property", {path:"/state", expected:"Closed"})
    ]
    // item 2978
    tests.push(new Test("Door-Closing-done", steps))
}

function testLiftMain(tests) {
    // item 3264
    var steps
    // item 3267
    var tree = {
    	type: "LiftMain",
    	start:2,
    	door: {type:"MockDoor"},
    	cabin: {type:"MockCabin"},
    	sched: {type:"MockScheduler"}
    }
    // item 3268
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/state", value:"Moving"}),
    new Step("set property", {path:"/door/state", value:"Closed"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:3}),
    new Step("send message", {path:"/", messageType:"go", message:3}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveArg", expected:3}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3269
    tests.push(new Test("LiftMain-Cabin-Moving-go", steps))
    // item 3348
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/state", value:"Moving"}),
    new Step("set property", {path:"/door/state", value:"Closed"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:null}),
    new Step("send message", {path:"/", messageType:"go", message:3}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveCalled", expected:false}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3349
    tests.push(new Test("LiftMain-Cabin-Moving-go no target", steps))
    // item 3350
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/state", value:"Moving"}),
    new Step("set property", {path:"/door/state", value:"Open"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:null}),
    new Step("send message", {path:"/", messageType:"go", message:3}),
    new Step("check property", {path:"/sched/chooseNextCalled", expected:false}),
    new Step("check property", {path:"/cabin/moveCalled", expected:false}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3351
    tests.push(new Test("LiftMain-Cabin-Moving-go door open", steps))
    // item 3344
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/state", value:"Still"}),
    new Step("set property", {path:"/door/state", value:"Closed"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:3}),
    new Step("send message", {path:"/", messageType:"go", message:3}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveArg", expected:3}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3345
    tests.push(new Test("LiftMain-Cabin-Still-go different", steps))
    // item 3346
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/state", value:"Still"}),
    new Step("set property", {path:"/door/state", value:"Closed"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("send message", {path:"/", messageType:"go", message:2}),
    new Step("check property", {path:"/sched/dimArg", expected:2}),
    new Step("check property", {path:"/door/openArg", expected:2}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3347
    tests.push(new Test("LiftMain-Cabin-Still-go same", steps))
    // item 3355
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("send message", {path:"/", messageType:"opened", message:100}),
    new Step("check message", {index:0, target:"/door", messageType:"close", message:null, ms:2000}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3356
    tests.push(new Test("LiftMain-opened", steps))
    // item 3378
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/door/state", value:"Closed"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:3}),
    new Step("send message", {path:"/", messageType:"closed", message:3}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveArg", expected:3}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3379
    tests.push(new Test("LiftMain-closed", steps))
    // item 3380
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("send message", {path:"/", messageType:"arrived", message:2}),
    new Step("check property", {path:"/sched/dimArg", expected:2}),
    new Step("check property", {path:"/door/openArg", expected:2}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3381
    tests.push(new Test("LiftMain-arrived", steps))
}

function testLiftMainStill(tests) {
    // item 3230
    var steps
    // item 3233
    var tree = {
    	type: "LiftMain",
    	start:2,
    	door: {type:"MockDoor"},
    	cabin: {type:"MockCabin"},
    	ctrl: {type:"MockControl"},
    	sched: {type:"MockScheduler"}
    }
    // item 3231
    steps = [
    	new Step("create tree", tree),
    	new Step("send message", {path:"/", messageType:"init", message:null}),
    	new Step("check property", {path:"/door/initArg", expected:2}),
    	new Step("check property", {path:"/cabin/initArg", expected:2}),
    	new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3232
    tests.push(new Test("LiftMain-Created-init", steps))
    // item 3298
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("send message", {path:"/", messageType:"go", message:2}),
    new Step("check property", {path:"/ctrl/dimFloorArg", expected:2}),
    new Step("check property", {path:"/sched/dimButtonsArg", expected:2}),
    new Step("check property", {path:"/door/openArg", expected:2}),
    new Step("check property", {path:"/state", expected:"Still"})
    ]
    // item 3299
    tests.push(new Test("LiftMain-Ready-go same", steps))
    // item 3301
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Ready"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:3}),
    new Step("send message", {path:"/", messageType:"go", message:3}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveArg", expected:3}),
    new Step("check property", {path:"/state", expected:"Moving"})
    ]
    // item 3302
    tests.push(new Test("LiftMain-Ready-go different", steps))
    // item 3234
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Still"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:3}),
    new Step("send message", {path:"/", messageType:"closed", message:null}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveArg", expected:3}),
    new Step("check property", {path:"/state", expected:"Moving"})
    ]
    // item 3235
    tests.push(new Test("LiftMain-Still-closed has target", steps))
    // item 3242
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Still"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("set property", {path:"/sched/target", value:null}),
    new Step("send message", {path:"/", messageType:"closed", message:null}),
    new Step("check property", {path:"/sched/chooseNextArg", expected:2}),
    new Step("check property", {path:"/cabin/moveCalled", expected:false}),
    new Step("check property", {path:"/state", expected:"Ready"})
    ]
    // item 3243
    tests.push(new Test("LiftMain-Still-closed no target", steps))
    // item 3244
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Still"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("send message", {path:"/", messageType:"go", message:2}),
    new Step("check property", {path:"/ctrl/dimFloorArg", expected:2}),
    new Step("check property", {path:"/sched/dimButtonsArg", expected:2}),
    new Step("check property", {path:"/door/openArg", expected:2}),
    new Step("check property", {path:"/state", expected:"Still"})
    ]
    // item 3247
    steps = [
    new Step("create tree", tree),
    new Step("set property", {path:"/state", value:"Still"}),
    new Step("set property", {path:"/cabin/current", value:2}),
    new Step("send message", {path:"/", messageType:"go", message:3}),
    new Step("check property", {path:"/ctrl/dimFloorCalled", expected:false}),
    new Step("check property", {path:"/sched/dimButtonsCalled", expected:false}),
    new Step("check property", {path:"/door/openCalled", expected:false}),
    new Step("check property", {path:"/state", expected:"Still"})
    ]
    // item 3248
    tests.push(new Test("LiftMain-Still-go different", steps))
}

function testScheduler(tests) {
    // item 2654
    var steps
    var tree = {
    	type: "Scheduler",
    	buttons: {type:"MockButtons"}
    }
    // item 3197
    steps = [
    	new Step("create tree", tree),
    	new Step("set property", {path:"/state", value:"Up"}),
    	new Step("set property", {path:"/buttons/getAboveResult", value:3}),
    	new Step("send message", {path:"/", messageType:"chooseNext", message:2}),
    	new Step("check property", {path:"/target", expected:3}),
    	new Step("check property", {path:"/state", expected:"Up"})
    ]
    // item 3198
    tests.push(new Test("Scheduler-Up-chooseNext above", steps))
    // item 3201
    steps = [
    	new Step("create tree", tree),
    	new Step("set property", {path:"/state", value:"Up"}),
    	new Step("set property", {path:"/buttons/getAboveResult", value:null}),
    	new Step("set property", {path:"/buttons/getBelowResult", value:1}),
    	new Step("send message", {path:"/", messageType:"chooseNext", message:2}),
    	new Step("check property", {path:"/target", expected:1}),
    	new Step("check property", {path:"/state", expected:"Down"})
    ]
    // item 3202
    tests.push(new Test("Scheduler-Up-chooseNext below", steps))
    // item 3203
    steps = [
    	new Step("create tree", tree),
    	new Step("set property", {path:"/buttons/getAboveResult", value:null}),
    	new Step("set property", {path:"/buttons/getBelowResult", value:null}),
    	new Step("set property", {path:"/state", value:"Up"}),
    	new Step("send message", {path:"/", messageType:"chooseNext", message:2}),
    	new Step("check property", {path:"/target", expected:null}),
    	new Step("check property", {path:"/state", expected:"Down"})
    ]
    // item 3204
    tests.push(new Test("Scheduler-Up-chooseNext none", steps))
    // item 3326
    steps = [
    	new Step("create tree", tree),
    	new Step("send message", {path:"/", messageType:"init", message:null}),
    	new Step("check property", {path:"/buttons/initCalled", expected:true}),
    	new Step("check property", {path:"/state", expected:"Up"})
    ]
    // item 3327
    tests.push(new Test("Scheduler-Created-init", steps))
    // item 3206
    steps = [
    	new Step("create tree", tree),
    	new Step("set property", {path:"/buttons/getBelowResult", value:1}),
    	new Step("set property", {path:"/state", value:"Down"}),
    	new Step("send message", {path:"/", messageType:"chooseNext", message:2}),
    	new Step("check property", {path:"/target", expected:1}),
    	new Step("check property", {path:"/state", expected:"Down"})
    ]
    // item 3207
    tests.push(new Test("Scheduler-Down-chooseNext below", steps))
    // item 3210
    steps = [
    	new Step("create tree", tree),
    	new Step("set property", {path:"/buttons/getBelowResult", value:null}),
    	new Step("set property", {path:"/buttons/getAboveResult", value:4}),
    	new Step("set property", {path:"/state", value:"Down"}),
    	new Step("send message", {path:"/", messageType:"chooseNext", message:2}),
    	new Step("check property", {path:"/target", expected:4}),
    	new Step("check property", {path:"/state", expected:"Up"})
    ]
    // item 3211
    tests.push(new Test("Scheduler-Down-chooseNext above", steps))
    // item 3212
    steps = [
    	new Step("create tree", tree),
    	new Step("set property", {path:"/buttons/getBelowResult", value:null}),
    	new Step("set property", {path:"/buttons/getAboveResult", value:null}),
    	new Step("set property", {path:"/state", value:"Down"}),
    	new Step("send message", {path:"/", messageType:"chooseNext", message:2}),
    	new Step("check property", {path:"/target", expected:null}),
    	new Step("check property", {path:"/state", expected:"Up"})
    ]
    // item 3213
    tests.push(new Test("Scheduler-Down-chooseNext none", steps))
}

function toSimple(instance, obj) {
    // item 2860
    if (obj) {
        // item 2864
        if (obj === instance.logic.root) {
            // item 2867
            return "me"
        } else {
            // item 2868
            if (obj === instance.parent) {
                // item 2870
                return "parent"
            } else {
                // item 2863
                return obj
            }
        }
    } else {
        // item 2863
        return obj
    }
}

function toTarget(instance, path) {
    // item 33660001
    if ((path === "me") || (path === "parent")) {
        // item 3375
        return path
    } else {
        // item 3377
        return findSubobject(
        	instance.logic.root,
        	path
        )
    }
}

function wantDown(floor) {
    // item 791
    lightDownButton(floor, true)
    // item 813
    logic.callDown(floor)
    // item 2080
    redrawMachines()
}

function wantUp(floor) {
    // item 792
    lightUpButton(floor, true)
    // item 814
    logic.callUp(floor)
    // item 2081
    redrawMachines()
}

function Motor() {
  var _self = this;
  _self.type_name = "Motor";
  _self.state = "Created";
  _self.connect = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      Motor_Created_connect(_self, msg)
    }
    else if (_state_ == "Still") {
      Motor_Still_connect(_self, msg)
    }
  }
  _self.init = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      Motor_Created_init(_self, msg)
    }
  }
  _self.setTarget = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Still") {
      Motor_Still_setTarget(_self, msg)
    }
    else if (_state_ == "Working") {
      Motor_Working_setTarget(_self, msg)
    }
  }
  _self.update = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Working") {
      Motor_Working_update(_self, msg)
    }
  }
}

function ListScanner() {
  var _self = this;
  _self.type_name = "ListScanner";
  _self.state = "Created";
  _self.done = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      ListScanner_Created_default(_self, msg)
    }
    else if (_state_ == "Waiting") {
      ListScanner_Waiting_default(_self, msg)
    }
    else if (_state_ == "Working") {
      ListScanner_Working_done(_self, msg)
    }
  }
  _self.init = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      ListScanner_Created_init(_self, msg)
    }
    else if (_state_ == "Waiting") {
      ListScanner_Waiting_default(_self, msg)
    }
    else if (_state_ == "Working") {
      ListScanner_Working_default(_self, msg)
    }
  }
  _self.next = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      ListScanner_Created_default(_self, msg)
    }
    else if (_state_ == "Waiting") {
      ListScanner_Waiting_next(_self, msg)
    }
    else if (_state_ == "Working") {
      ListScanner_Working_default(_self, msg)
    }
  }
}

function TestRunner() {
  var _self = this;
  _self.type_name = "TestRunner";
  _self.state = "Created";
  _self.done = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      TestRunner_Created_default(_self, msg)
    }
    else if (_state_ == "Working") {
      TestRunner_Working_done(_self, msg)
    }
  }
  _self.init = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      TestRunner_Created_init(_self, msg)
    }
    else if (_state_ == "Working") {
      TestRunner_Working_default(_self, msg)
    }
  }
}

function Tester() {
  var _self = this;
  _self.type_name = "Tester";
  _self.state = "Created";
  _self.init = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      Tester_Created_init(_self, msg)
    }
    else if (_state_ == "Working") {
      Tester_Working_default(_self, msg)
    }
  }
  _self.next = function(msg) {
    var _state_ = _self.state
    if (_state_ == "Created") {
      Tester_Created_default(_self, msg)
    }
    else if (_state_ == "Working") {
      Tester_Working_next(_self, msg)
    }
  }
}


sm.afterMessage = afterMessage

module.testBuilders = makeTestBuilders()

module.init = init
module.runTests = runTests
}
